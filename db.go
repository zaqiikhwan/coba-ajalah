package diygoapi

import (
	"context"
	"time"

	"github.com/jackc/pgconn"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/rs/zerolog"
)

// Datastorer is an interface for working with the Database
type Datastorer interface {
	// Ping pings the DB pool.
	Ping(ctx context.Context) error
	// BeginTx starts a pgx.Tx using the input context
	BeginTx(ctx context.Context) (pgx.Tx, error)
	// RollbackTx rolls back the input pgx.Tx
	RollbackTx(ctx context.Context, tx pgx.Tx, err error) error
	// CommitTx commits the Tx
	CommitTx(ctx context.Context, tx pgx.Tx) error
}

// DBTX interface mirrors the interface generated by https://github.com/kyleconroy/sqlc
// to allow passing a Pool or a Tx
type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
}

// PingServicer pings the database and responds whether it is up or down
type PingServicer interface {
	Ping(ctx context.Context, lgr zerolog.Logger) PingResponse
}

// PingResponse is the response struct for the PingService
type PingResponse struct {
	DBUp bool `json:"db_up"`
}

// NewPgxInt4 returns a pgx/pgtype.Int4 with the input value
func NewPgxInt4(i int32) pgtype.Int4 {
	return pgtype.Int4{
		Int32: i,
		Valid: true,
	}
}

// NewPgxInt8 returns a pgx/pgtype.Int8 with the input value
func NewPgxInt8(i int64) pgtype.Int8 {
	return pgtype.Int8{
		Int64: i,
		Valid: true,
	}
}

// NewPgxText returns a pgx/pgtype.Text with the input value.
// If the input string is empty, it returns an empty pgtype.Text
func NewPgxText(s string) pgtype.Text {
	if len(s) == 0 {
		return pgtype.Text{}
	}
	return pgtype.Text{
		String: s,
		Valid:  true,
	}
}

// NewPgxTimestampTZ returns a pgx/pgtype.Timestamptz with the input value
func NewPgxTimestampTZ(t time.Time) pgtype.Timestamptz {
	return pgtype.Timestamptz{
		Time:  t,
		Valid: true,
	}
}

// NewPgxDate returns a pgx/pgtype.Date with the input value
func NewPgxDate(t time.Time) pgtype.Date {
	return pgtype.Date{
		Time:  t,
		Valid: true,
	}
}
